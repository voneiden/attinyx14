[[topics]]
    topic = "Clock rate"
    chip = true
    title = "Clock rate"
    text = """
The ATtiny boots up with the 16/20 MHz oscillator (OSC20M) running at 20 MHz as the clock source and a prescaler division factor of 6 giving a frequency of at 3.333 MHz <ref>74</ref>.

The clock source and clock prescaler can be configured by temporarily disabling I/O register Configuration Change Protection (CCP). This is done by setting 0xD8 as the value of <reg>CPU.CCP.CCP</reg> register, followed by setting the desired values to <reg>CLKCTRL.MCLKCTRLA.CLKSEL</reg> and <reg>CLKCTRL.MCLKCTRLB.PDIV</reg> registers.

<topic>Fuses</topic> define whether OSC20M runs at 16 or 20 MHz: <reg>FUSE.OSCCFG.FREQSEL</reg>.


Ex 1: Disable prescaler to run at full 16/20 MHz
```C
#include <avr/io.h>
CPU_CCP = CCP_IOREG_gc;
CLKCTRL_MCLKCTRLB = 0;
```

"""

[[topics]]
    topic = "POWER"
    title = "Powering the ATtiny"
    text = """
The device can be powered with 1.8 - 5.5 volts. It's worth noting that <topic>BOD</topic> may limit the lower bound. Also the safe clock speed is limited based on voltage and temperature as follows

* [1.8 .. 5.5]V, [-40 .. 105]C: 5 MHz
* [2.7 .. 5.5]V, [-40 .. 105]C: 10 MHz
* [4.5 .. 5.5]V, [-40 .. 105]C: 20 MHz
* [2.7 .. 5.5]V, [-40 .. 125]C: 8 MHz
* [4.5 .. 5.5]V, [-40 .. 125]C: 16 MHz
"""

[[topics]]
    topic = "PORTA"
    title = "Port A IO pins"
    text = """
Port A IO pins are operated via the PORTA registry which follows the generic <reg>PORT</reg> layout. `DIRSET`, `DIRCLR` and `DIRTGL` provide convinience methods for manipulating individual bits without disturbing other pins.

* <topic>EX_DIGITAL_INPUT</topic>
* <topic>EX_DIGITAL_OUTPUT</topic>

"""

[[topics]]
    topic = "EX_DIGITAL_INPUT"
    title = "Example: Digital input"
    text = """

In this example PORTA pin 2 (PA2) is used with an internal pull-up resistor to read a digital value. To use a pin as an input, <reg>PORT.DIR.2</reg> for the corresponding pin must be zero (use <reg>PORT.DIRCLR.2</reg>). To use the internal pull-up resistor <reg>PORT.PIN2CTRL.PULLUPEN</reg> must be set to one. Finally the input value can be read from <reg>PORT.IN.2</reg>.

Example

```C
PORTA_DIRCLR = 1<<2;
PORTA_PIN2CTRL = PORT_PULLUPEN_bm;
byte value = PORTA_IN & 1<<2;
```
"""

[[topics]]
    topic = "EX_DIGITAL_OUTPUT"
    title = "Example: Digital output"
    text = """

In this example PORTA pin 2 (PA2) is used as an output. To use a pin as an output, <reg>PORT.DIR.2</reg> for the corresponding pin must be one (use <reg>PORT.DIRSET.2</reg>). The output value can be set via <reg>PORT.OUT.2</reg> (use <reg>PORT.OUTSET.2</reg>, <reg>PORT.OUTCLR.2</reg> or <reg>PORT.OUTTGL.2</reg>).

Example

```C
PORTA_DIRSET = 1<<2;
PORTA_OUTSET = 1<<2; // output high
PORTA_OUTCLR = 1<<2; // output low
```
"""

[[topics]]
    topic = "PORTB"
    title = "Port B IO pins"
    text = """
Port B IO pins are operated via the PORTB registry which follows the generic <reg>PORT</reg> layout.

See <topic>PORTA</topic> for generic examples on how to work with standard port IO.
"""

[[topics]]
    topic = "TWI"
    title = "Two-Wire Interface (I2C)"
    text = """
Lorem ipsum about the horrors of I2C
"""

[[topics]]
    topic = "TWI-ALT"
    title = "Two-Wire Interface (I2C) (Alternative pin configuration)"
    text = """
Alternative pin position for TWI outputs can be enabled via <reg>PORTMUX.CTRLB</reg>
"""

[[topics]]
    topic = "PWM"
    title = "Pulse Width Modulation"
    chip = true
    text = """
The best option for PWM is the <topic>TCA</topic>. It provides 3 PWM outputs in standard mode, and 3 extra WM outputs in <topic>TCA-SPLIT</topic>.

The timer can be configured in various ways, but the bottom line in PWM is that it counts from some number (typically zero) to another number (period) with a ratio relative to clock speed and then rolls over back to beginning. At each increment/decrement the compare channel checks if the current value of the counter is greater than the set value for the comparator and toggles corresponding output accordingly.

For example to get a 25% duty cycle, we could set the timer period to 100 ticks and the compare value to 75. The timer would then loop from 0 to 99 and turn on the output during the duration the counter is between 75 and 99.  The actual frequency of the PWM is defined by the <topic>Clock rate</topic> and clock divisor of the timer module.
"""

[[topics]]
    topic = "TCA"
    title = "16-bit Timer/Counter Type A"
    text = """
This timer/counter comes with three compare channels and is able to generate PWM waveforms. In normal 16-bit mode it can output to three pins and in 8-bit split mode it can drive up to 6 PWM pins.
"""


[[topics]]
    topic = "TCA-SPLIT"
    title = "16-bit Timer/Counter Type A (Split Mode)"
    text = """
The <topic>TCA</topic> can run in split mode. Split mode gives three extra outputs by splitting the 16 bit timer into two 8 bit timers. For typical PWM purposes, like controlling LED intensity, 8-bits is still plenty.

Split mode example to output a 80% duty cycle <topic>PWM</topic> signal on WO3. When running at 20 MHz, this would produce a frequency of approximately `1.23 kHz` (`20 MHz / 255 / 64`).
```C
uint8_t period = 255;
uint8_t duty_cycle = 204;

TCA0_SPLIT_CTRLD = TCA_SPLIT_SPLITM_bm; // Set TCA to split mode
TCA0_SPLIT_CTRLB = TCA_SPLIT_HCMP0EN_bm; // Enable PWM for high-byte compare 0 (WO3)
TCA0_SPLIT_HPER = period; // Set the high-byte counter period
TCA0_SPLIT_CTRLA = TCA_SPLIT_CLKSEL_DIV64_gc; // Use a clock divisor of 64
TCA0_SPLIT_HCMP0 = duty_cycle * period / 255; // Set the high-byte compare value, a bit redundant since period is 255.
TCA0_SPLIT_CTRLA |= TCA_SPLIT_ENABLE_bm; // Turn the counter on
```
"""

[[topics]]
    topic = "TCA-ALT"
    title = "16-bit Timer/Counter Type A (Alternative pin configuration)"
    text = """
Alternative pin position for TCA0 waveform 0 (W0) output can be enabled via <reg>PORTMUX.CTRLC.TCA00</reg>
"""


[[topics]]
    topic = "TCB"
    title = "16-bit Timer/Counter Type B"
    text = """
Lorem ipsum about the joys of TCB
"""

[[topics]]
    topic = "TCD"
    title = "12-bit Timer/Counter Type D"
    text = """
Lorem ipsum about the joys of TCD
"""

[[topics]]
    topic = "ADC"
    title = "Analog to digital converter"
    text = """
Lorem ipsum about ADC
"""

[[topics]]
    topic = "SPI"
    title = "Serial Peripheral Interface (SPI)"
    text = """
Lorem ipsum about SPI
"""


[[topics]]
    topic = "SPI-ALT"
    title = "Serial Peripheral Interface (SPI) (Alternative pin configuration)"
    text = """
Lorem ipsum about ADC
"""


[[topics]]
    topic = "UPDI"
    title = "Unified Program and Debug Interface (UPDI)"
    text = """
Lorem ipsum about UPDI
"""


[[topics]]
    topic = "RESET"
    title = "Reset"
    text = """
Lorem ipsum about reset
"""

[[topics]]
    topic = "EVOUT"
    title = "Event system output"
    text = """
Lorem ipsum about event system
"""

[[topics]]
    topic = "TOSC"
    title = "External Crystal Oscillator"
    text = """
Lorem ipsum about TOSC
"""

[[topics]]
    topic = "EXTCLK"
    title = "External Clock Source"
    text = """
Lorem ipsum about EXTCLK
"""


[[topics]]
    topic = "Fuses"
    chip = true
    title = "Fuses"
    text = """
Lorem ipsum about fuses
<reg>FUSE</reg>
"""

[[topics]]
    topic = "RTC"
    chip = true
    title = "16-bit Real Time Clock (RTC)"
    text = """
Lorem ipsum about RTC
"""


[[topics]]
    topic = "AC"
    title = "Analog converter"
    text = """
Lorem ipsum about AC
"""

[[topics]]
    topic = "DAC"
    title = "Digital to analog converter"
    text = """
Lorem ipsum about DAC
"""

[[topics]]
    topic = "USART"
    title = "Universal Serial A...?"
    text = """
Lorem ipsum about USART
"""

[[topics]]
    topic = "USART-ALT"
    title = "Universal Serial A...? (Alternative pin configuration)"
    text = """
Alternative pin configuration for the USART is available on all chips except ATTiny814. These can be enabled via <reg>PORTMUX.CTRLB.SPI0</reg>
"""

[[topics]]
    topic = "CCL"
    title = "Custom Chip Logic"
    text = """
Lorem ipsum about CCL
"""