{"version":3,"sources":["components/pin-row.js","utils/cls.js","store.js","components/pin-attribute.js","components/chip-leg.js","components/chip-topic.js","views/chip-view.js","components/registry-link.js","components/registry-offset.js","components/registry-offsets.js","components/datasheet-link.js","components/registry.js","views/topic-view.js","App.js","serviceWorker.js","index.js","config/attinyx14-pins.toml","config/attinyx14-topics.toml","config/attinyx14-registries.toml"],"names":["PinRow","props","pin","children","className","cls","args","filter","arg","join","PinAttributeModel","types","model","type","string","label","alt","optional","boolean","groups","array","PinModel","number","attributes","TopicModel","topic","title","text","chip","FieldModel","name","maybeNull","size","description","relatedGroups","OffsetModel","fields","RegistryModel","datasheetPage","offsets","store","topics","registries","pins","highlightGroups","activeGroup","activePin","datasheetUrl","actions","self","setTopics","setRegistries","setPins","console","log","setHighlightGroups","setActiveGroup","setActivePinAndGroup","views","length","slice","getTopic","find","t","getRegistry","registryName","r","getRegistryDatasheetLink","registry","getDatasheetPageLink","page","create","PinAttribute","observer","attribute","pinPrimaryGroup","pinActive","pinInActiveGroup","includes","pinInactive","pinPrimaryHighlight","primaryHighlightGroup","pinSecondaryHighlight","secondaryHighlightGroups","g","onMouseEnter","getSnapshot","onMouseLeave","onClick","e","stopPropagation","ChipLeg","ChipTopic","active","inactive","ChipView","pinsPerSide","leftPins","map","a","i","key","reverse","rightPins","chipTopics","RegistryLink","offset","field","RegistryOffset","bits","fieldNameBlocks","disabled","range","rows","Array","keys","bit","block","RegistryOffsets","Fragment","DatasheetLink","link","href","target","rel","Registry","o","linkElement","md","MarkdownIt","highlight","str","lang","hljs","value","__","html","TopicView","formatted","references","render","jsx","ReactHtmlParser","transform","node","index","parent","data","split","push","formatText","httpGet","theUrl","xmlHttp","XMLHttpRequest","open","send","responseText","attinyx14pins","attinyx14pinsPath","attinyx14topics","attinyx14topicsPath","attinyx14registries","attinyx14registriesPath","toml","regs","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.271853d3.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst PinRow = function PinRow(props) {\n    const {pin, children} = props;\n    return (\n        <div className={`pin-row pin-${pin.pin}`}>\n            {children}\n        </div>\n    )\n};\nPinRow.propTypes = {\n    children: PropTypes.arrayOf(PropTypes.node),\n    pin: PropTypes.object.isRequired,\n};\nexport default PinRow;","const cls = function cls(...args) {\n    return args.filter(arg => arg).join(' ')\n};\n\nexport default cls;","import { types } from \"mobx-state-tree\";\n\n\nconst PinAttributeModel = types.model({\n    type: types.string,\n    label: types.string,\n    alt: types.optional(types.boolean, false),\n    groups: types.array(types.string),\n});\n\nconst PinModel = types.model({\n    pin: types.number,\n    attributes: types.array(PinAttributeModel),\n});\n\nconst TopicModel = types.model( {\n    topic: types.string,\n    title: types.string,\n    text: types.string,\n    chip: types.optional(types.boolean, false)\n});\n\nconst FieldModel = types.model({\n    name: types.maybeNull(types.string),\n    size: types.optional(types.number, 1),\n    description: types.maybeNull(types.string),\n    relatedGroups: types.array(types.string),\n});\n\nconst OffsetModel = types.model({\n    name: types.string,\n    fields: types.array(FieldModel)\n});\n\nconst RegistryModel = types.model({\n    name: types.string,\n    datasheetPage: types.maybeNull(types.number),\n    offsets: types.array(OffsetModel)\n});\n\nconst Store = types.model({\n    topics: types.array(TopicModel),\n    registries: types.array(RegistryModel),\n    pins: types.array(PinModel),\n    highlightGroups: types.array(types.string),\n    activeGroup: types.maybeNull(types.string),\n    activePin: types.maybeNull(types.number),\n    datasheetUrl: types.optional(types.string, \"http://ww1.microchip.com/downloads/en/DeviceDoc/ATtiny214-414-814-DataSheet-DS40001912C.pdf\")\n\n}).actions(self => ({\n    setTopics(topics) {\n        self.topics = topics;\n    },\n    setRegistries(registries) {\n        self.registries = registries;\n    },\n    setPins(pins) {\n        self.pins = pins;\n        console.log(\"Set pins\", pins)\n    },\n    setHighlightGroups(highlightGroups) {\n        console.log(\"set\", highlightGroups)\n        if (highlightGroups !== self.highlightGroups) {\n            self.highlightGroups = highlightGroups ? highlightGroups : []\n        }\n    },\n    setActiveGroup(activeGroup) {\n        if (activeGroup !== self.activeGroup) {\n            self.activeGroup = activeGroup\n        }\n    },\n    setActivePinAndGroup(activePin, activeGroup) {\n        if (activePin !== self.activePin) {\n            self.activePin = activePin\n        }\n        if (activeGroup !== self.activeGroup) {\n            self.activeGroup = activeGroup\n        }\n    }\n})).views(self => ({\n    get primaryHighlightGroup() {\n        return self.highlightGroups.length ? self.highlightGroups[0] : null\n    },\n    get secondaryHighlightGroups() {\n        return self.highlightGroups.slice(1)\n    },\n    getTopic(topic) {\n        return self.topics.find((t) => t.topic === topic)\n    },\n    getRegistry(registryName) {\n        return self.registries.find((r) => r.name === registryName)\n    },\n    getRegistryDatasheetLink(registry) {\n        return self.getDatasheetPageLink(registry.datasheetPage)\n    },\n     getDatasheetPageLink(page) {\n        return page ? `${self.datasheetUrl}#page=${page}` : null\n    },\n    get chipTopics() {\n        return self.topics.filter(t => t.chip)\n    }\n\n}));\n\nconst store = Store.create();\nexport default store","import React from \"react\";\nimport \"./pin-attribute.scss\";\nimport cls from \"../utils/cls\";\nimport store from \"../store\";\nimport { observer } from 'mobx-react'\nimport {getSnapshot} from \"mobx-state-tree\";\n\nconst PinAttribute = observer(function PinAttribute(props) {\n    const { pin, attribute } = props;\n    const { label, type, alt, groups } = attribute;\n    const { activeGroup, activePin } = store;\n    const pinPrimaryGroup = groups.length ? groups[0] : null;\n    const pinActive = activePin && activePin === pin.pin\n    const pinInActiveGroup = groups.includes(activeGroup);\n    const pinInactive =  activeGroup && !pinInActiveGroup\n    const pinPrimaryHighlight =  groups.includes(store.primaryHighlightGroup);\n    const pinSecondaryHighlight = !pinPrimaryHighlight && store.secondaryHighlightGroups.filter((g) => groups.includes(g)).length;\n    return (\n        <div className={\n            cls(\n                `pin-attribute`,\n                `${type}-pin`,\n                alt && `alt-pin`,\n                pinPrimaryHighlight && `highlight-primary-pin`,\n                pinSecondaryHighlight && `highlight-secondary-pin`,\n                pinActive && `active-pin`,\n                pinInActiveGroup && `active-group`,\n                pinInactive && `inactive-group`,\n                )}\n             onMouseEnter={() => store.setHighlightGroups(getSnapshot(groups))}\n             onMouseLeave={() => store.setHighlightGroups([])}\n             onClick={(e) => {\n                 store.setActivePinAndGroup(pin.pin, pinPrimaryGroup);\n                 e.stopPropagation()}\n             }\n        >\n            { label }\n        </div>\n    )\n})\n\nexport default PinAttribute;","import React from \"react\";\nimport PropTypes from \"prop-types\"\nimport \"./chip-leg.scss\"\n\nconst ChipLeg = function ChipLeg(props) {\n    const {pin} = props;\n    return <div className=\"chip-leg\"><span className=\"pin-number\">{pin}</span></div>\n};\nChipLeg.propTypes = {\n    pin: PropTypes.number.isRequired,\n};\n\nexport default ChipLeg;","import React from \"react\";\nimport PropTypes from \"prop-types\"\nimport \"./chip-leg.scss\"\nimport cls from \"../utils/cls\"\nimport store from \"../store\"\nimport \"./chip-topic.scss\"\nimport {observer} from \"mobx-react\";\n\nconst ChipTopic = observer(function ChipTopic(props) {\n    const {topic} = props;\n    const active = store.activeGroup === topic;\n    const inactive = store.activeGroup && !active;\n\n    return (\n        <div className={\n            cls(\n                `chip-topic`,\n                active && `active-topic`,\n                inactive && `inactive-topic`,\n            )}\n             onMouseEnter={() => store.setHighlightGroups([topic])}\n             onMouseLeave={() => store.setHighlightGroups([])}\n             onClick={(e) => {\n                 store.setActivePinAndGroup(null, topic);\n                 e.stopPropagation()\n             }\n             }\n        >\n            {topic}\n        </div>\n    )\n});\nChipTopic.propTypes = {\n    topic: PropTypes.string.isRequired,\n};\n\nexport default ChipTopic;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport PinRow from \"../components/pin-row\";\nimport PinAttribute from \"../components/pin-attribute\";\nimport store from \"../store\";\nimport ChipLeg from \"../components/chip-leg\";\nimport ChipTopic from \"../components/chip-topic\";\n\nconst ChipView = function ChipView(props) {\n    const { pins } = store;\n    const pinsPerSide = pins.length / 2;\n    console.log(\"PINS\", pins);\n    const leftPins = pins.slice(0, pinsPerSide).map(pin => {\n        const attributes = pin.attributes.map((a, i) => {\n            return <PinAttribute key={i} attribute={a} pin={pin}/>\n        });\n        attributes.reverse();\n        return (\n            <PinRow pin={pin}>\n                {attributes}\n                <ChipLeg pin={pin.pin}/>\n            </PinRow>\n        )\n    });\n    const rightPins = pins.slice(pinsPerSide, pins.length).map(pin => {\n        const attributes = pin.attributes.map((a, i) => {\n            return <PinAttribute key={i} attribute={a} pin={pin}/>\n        });\n        return (\n            <PinRow pin={pin}>\n                <ChipLeg pin={pin.pin}/>\n                {attributes}\n            </PinRow>\n        )\n    });\n\n    const chipTopics = store.chipTopics.map(topic => {\n        return <ChipTopic key={topic.topic} topic={topic.topic}/>\n    });\n\n    return (\n        <div className=\"model-row\" onClick={() => store.setActivePinAndGroup(null, null)}>\n            <div className=\"model-row--left-column\">\n                {leftPins}\n            </div>\n            <div className=\"model-row--middle-column\">\n                <div className=\"attiny\">\n                    <div className=\"pin1marker\"/>\n                    { chipTopics }\n                </div>\n            </div>\n            <div className=\"model-row--right-column\">\n                {rightPins}\n            </div>\n        </div>\n    )\n};\nChipView.propTypes = {\n};\nexport default ChipView;","import React from \"react\";\nimport PropTypes from \"prop-types\"\n\nconst RegistryLink = function RegistryLink(props) {\n    const {registry, offset, field} = props;\n\n    const text = offset ? `${registry}.${offset}` : `${registry}`;\n\n    return (\n        <a>\n            { text }\n        </a>\n    )\n};\nRegistryLink.propTypes = {\n    registry: PropTypes.string.isRequired,\n    offset: PropTypes.string,\n    field: PropTypes.string,\n};\nexport default RegistryLink;","import React, {useState} from \"react\";\nimport PropTypes from \"prop-types\";\nimport store from \"../store\"\nimport \"./registry-offset.scss\";\nimport cls from \"../utils/cls\";\n\n    const RegistryOffset = function RegistryOffset(props) {\n    const { offset } = props;\n    let bits = 0;\n\n    const fieldNameBlocks = offset.fields.map((field, i) => {\n        bits += field.size;\n        const active = field.relatedGroups.includes(store.activeGroup);\n        const disabled = !field.name;\n        const range = field.size > 1 && !disabled ? `[${i+field.size-1}:${i}]` : null;\n        return (\n            <div className={cls(\n                `field-size-${field.size}`,\n                active && `active`,\n                disabled && `disabled`,\n            )}>\n                {field.name}{range}\n            </div>\n        )\n    }).reverse();\n\n    const bitBlocks = [...Array(bits).keys()].map(bit => {\n        return (\n            <div className={cls(\n                `field-size-1`,\n                `bit-number`\n            )}>\n                {bit}\n            </div>\n        )\n    }).reverse();\n\n    const rows = [bitBlocks, fieldNameBlocks].map(block => {\n        return (\n            <div className=\"block-row\">{block}</div>\n        )\n    });\n\n\n\n    return (\n        <div className='registry-offset offset-fields'>\n            { rows }\n        </div>\n    )\n};\n\nRegistryOffset.propTypes = {\n    offset: PropTypes.object.isRequired,\n};\nexport default RegistryOffset;","import React from \"react\";\nimport PropTypes from \"prop-types\"\nimport \"./chip-leg.scss\"\nimport \"./chip-topic.scss\"\nimport {observer} from \"mobx-react\";\nimport RegistryOffset from \"./registry-offset\";\n\nconst RegistryOffsets = observer(function RegistryOffsets(props) {\n    const {registry} = props;\n    const offsets = registry.offsets.map((offset, i) => {\n        const title = offset ? `${registry.name}.${offset.name}` : registry.name;\n        return (\n            <React.Fragment key={i}>\n                <span className=\"title\">{title}</span>\n                <RegistryOffset offset={offset}/>\n            </React.Fragment>\n\n        )\n    });\n\n    return (\n        <React.Fragment>\n            {offsets}\n        </React.Fragment>\n    )\n});\nRegistryOffsets.propTypes = {\n    registry: PropTypes.object.isRequired,\n};\n\nexport default RegistryOffsets;","import React from \"react\";\nimport PropTypes from \"prop-types\"\nimport store from \"../store\"\nimport \"./chip-topic.scss\"\n\nconst DatasheetLink = function DatasheetLink(props) {\n    const {registry, page} = props;\n    const link = registry ? store.getRegistryDatasheetLink(registry) : store.getDatasheetPageLink(page);\n    return link ? <a href={link} target=\"_blank\" rel=\"noopener noreferrer\">🗎</a> : <span>(??? link ???)</span>;\n};\nDatasheetLink.propTypes = {\n    registry: PropTypes.object,\n    page: PropTypes.number\n};\n\nexport default DatasheetLink;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport store from \"../store\"\nimport RegistryOffset from \"./registry-offset\";\nimport \"./registry.scss\"\nimport RegistryOffsets from \"./registry-offsets\";\nimport DatasheetLink from \"./datasheet-link\";\n\nconst Registry = function Registry(props) {\n    const registry = store.getRegistry(props.registry);\n    if (!registry) {\n        return <div>Registry definition for '{props.registry}' is missing</div>\n    }\n\n\n    const offset = registry.offsets.find(o => o.name === props.offset);\n    console.log(\"offset\", offset, props.offset, registry.offsets);\n    const title = offset ? `${registry.name} > ${offset.name}` : registry.name;\n    const linkElement = <DatasheetLink registry={registry}/>;\n    if (!props.offset) {\n        return (\n            <div className=\"registry\">\n                <div>\n                    <span className=\"title\">{title} {linkElement}</span>\n                    <RegistryOffsets registry={registry}/>\n                </div>\n\n            </div>\n        )\n    }\n    return (\n        <div className=\"registry\">\n            <div>\n                <span className=\"title\">{title} {linkElement}</span>\n                {offset && <RegistryOffset offset={offset}/>}\n            </div>\n        </div>\n    )\n};\n\nRegistry.propTypes = {\n    registry: PropTypes.string.isRequired,\n    offset: PropTypes.string,\n    field: PropTypes.string,\n};\nexport default Registry;","import React from \"react\";\nimport store from \"../store\"\nimport \"./topic-view.scss\"\nimport {observer} from \"mobx-react\";\nimport RegistryLink from \"../components/registry-link\";\nimport Registry from \"../components/registry\";\nimport DatasheetLink from \"../components/datasheet-link\";\nimport MarkdownIt from 'markdown-it';\nimport * as hljs from \"highlight.js\";\nimport \"highlight.js/styles/dracula.css\";\nimport ReactHtmlParser from 'react-html-parser';\n\nconst md = new MarkdownIt({\n  highlight: function (str, lang) {\n    if (lang && hljs.getLanguage(lang)) {\n      try {\n        return hljs.highlight(lang, str).value;\n      } catch (__) {\n      }\n    }\n    return ''; // use external default escaping\n  },\n  html: true,\n});\n\nconst formatText = function formatText(text) {\n  const references = [];\n  const html = md.render(text);\n  const jsx = ReactHtmlParser(html, {\n    transform: (node, index) => {\n      if (node.parent && node.parent.name === 'reg' && node.type === 'text') {\n        const [registry, offset, field] = node.data.split(\".\");\n        references.push(<Registry registry={registry} offset={offset} field={field}/>);\n        return <RegistryLink registry={registry} offset={offset} field={field}/>;\n      } else if (node.parent && node.parent.name === 'ref' && node.type === 'text') {\n        return <DatasheetLink page={node.data}/>\n      }\n      return undefined\n    }\n  });\n  return (\n    <React.Fragment>\n      {jsx}\n      <div className=\"references\">\n        {references}\n      </div>\n    </React.Fragment>\n  );\n};\n\nconst TopicView = observer(function TopicView(props) {\n  const {activeGroup} = store;\n  let formatted = null;\n  if (activeGroup) {\n    const topic = store.getTopic(activeGroup);\n    formatted = topic ? (\n      <React.Fragment>\n        <h3>{topic.title}</h3>\n        <div className=\"topic-text\">{formatText(topic.text)}</div>\n      </React.Fragment>\n    ) : <span>Topic '{activeGroup}' not found</span>\n  }\n  if (!formatted) {\n    const primaryHighlightGroup = store.primaryHighlightGroup;\n    const topic = store.getTopic(primaryHighlightGroup);\n    formatted = topic ? <h3>{topic.title}</h3> : null;\n  }\n  return (\n    <div\n      className=\"topic-view\"\n      onClick={e => e.stopPropagation()}\n    >\n      <div>\n        {formatted}\n      </div>\n    </div>\n  )\n});\n\nexport default TopicView;\n","import React from 'react';\nimport attinyx14pinsPath from './config/attinyx14-pins.toml';\nimport attinyx14topicsPath from './config/attinyx14-topics.toml';\nimport attinyx14registriesPath from './config/attinyx14-registries.toml';\nimport './App.scss';\nimport * as toml from \"toml\";\nimport ChipView from \"./views/chip-view\";\nimport store from './store';\nimport TopicView from \"./views/topic-view\";\n\nfunction httpGet(theUrl)\n{\n\tlet xmlHttp = new XMLHttpRequest();\n\txmlHttp.open( \"GET\", theUrl, false ); // false for synchronous request\n\txmlHttp.send( null );\n\treturn xmlHttp.responseText;\n}\nconst attinyx14pins = httpGet(attinyx14pinsPath);\nconst attinyx14topics = httpGet(attinyx14topicsPath);\nconst attinyx14registries = httpGet(attinyx14registriesPath);\n\nstore.setPins(toml.parse(attinyx14pins).pins);\nstore.setTopics(toml.parse(attinyx14topics).topics);\nstore.setRegistries(toml.parse(attinyx14registries).regs);\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <h1>ATtinyX14 Quick Reference</h1>\n\t\t\t<ChipView/>\n            <TopicView/>\n            <div className=\"data-row\">\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/attinyx14-pins.f30165e8.toml\";","module.exports = __webpack_public_path__ + \"static/media/attinyx14-topics.c3e27cff.toml\";","module.exports = __webpack_public_path__ + \"static/media/attinyx14-registries.c7b9ab98.toml\";"],"sourceRoot":""}