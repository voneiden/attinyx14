{"version":3,"sources":["config/attinyx14-pins.toml","config/attinyx14-topics.toml","config/attinyx14-registries.toml","components/pin-row.js","utils/cls.js","store.js","components/pin-attribute.js","components/chip-leg.js","components/chip-topic.js","views/chip-view.js","components/registry-link.js","components/registry-offset.js","components/registry.js","views/topic-view.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","PinRow","props","pin","children","className","cls","args","filter","arg","join","PinAttributeModel","types","model","type","string","label","alt","optional","boolean","groups","array","PinModel","number","attributes","TopicModel","topic","title","text","chip","FieldModel","name","maybeNull","size","description","relatedGroups","OffsetModel","fields","RegistryModel","datasheetPage","offsets","store","topics","registries","pins","highlightGroups","activeGroup","activePin","datasheetUrl","actions","self","setTopics","setRegistries","setPins","console","log","setHighlightGroups","setActiveGroup","setActivePinAndGroup","views","length","slice","getTopic","find","t","getRegistry","registryName","r","getRegistryDatasheetLink","registry","create","PinAttribute","observer","attribute","pinPrimaryGroup","pinActive","pinInActiveGroup","includes","pinInactive","pinPrimaryHighlight","primaryHighlightGroup","pinSecondaryHighlight","secondaryHighlightGroups","g","onMouseEnter","getSnapshot","onMouseLeave","onClick","e","stopPropagation","ChipLeg","ChipTopic","active","inactive","ChipView","pinsPerSide","leftPins","map","a","i","key","reverse","rightPins","chipTopics","RegistryLink","offset","field","RegistryOffset","bits","fieldNameBlocks","disabled","rows","Array","keys","bit","block","Registry","useState","o","link","linkElement","href","target","rel","splitter","RegExp","TopicView","formatted","Fragment","content","references","matchAll","registryDefinition","split","before","after","push","formatText","httpGet","theUrl","xmlHttp","XMLHttpRequest","open","send","responseText","attinyx14pins","attinyx14pinsPath","attinyx14topics","attinyx14topicsPath","attinyx14registries","attinyx14registriesPath","toml","regs","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.01512e3d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/attinyx14-pins.47edb17f.toml\";","module.exports = __webpack_public_path__ + \"static/media/attinyx14-topics.74a6c826.toml\";","module.exports = __webpack_public_path__ + \"static/media/attinyx14-registries.87a1f0fa.toml\";","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst PinRow = function PinRow(props) {\r\n    const {pin, children} = props;\r\n    return (\r\n        <div className={`pin-row pin-${pin.pin}`}>\r\n            {children}\r\n        </div>\r\n    )\r\n};\r\nPinRow.propTypes = {\r\n    children: PropTypes.arrayOf(PropTypes.node),\r\n    pin: PropTypes.object.isRequired,\r\n};\r\nexport default PinRow;","const cls = function cls(...args) {\r\n    return args.filter(arg => arg).join(' ')\r\n};\r\n\r\nexport default cls;","import { types } from \"mobx-state-tree\";\r\n\r\n\r\nconst PinAttributeModel = types.model({\r\n    type: types.string,\r\n    label: types.string,\r\n    alt: types.optional(types.boolean, false),\r\n    groups: types.array(types.string),\r\n});\r\n\r\nconst PinModel = types.model({\r\n    pin: types.number,\r\n    attributes: types.array(PinAttributeModel),\r\n});\r\n\r\nconst TopicModel = types.model( {\r\n    topic: types.string,\r\n    title: types.string,\r\n    text: types.string,\r\n    chip: types.optional(types.boolean, false)\r\n});\r\n\r\nconst FieldModel = types.model({\r\n    name: types.maybeNull(types.string),\r\n    size: types.optional(types.number, 1),\r\n    description: types.maybeNull(types.string),\r\n    relatedGroups: types.array(types.string),\r\n});\r\n\r\nconst OffsetModel = types.model({\r\n    name: types.string,\r\n    fields: types.array(FieldModel)\r\n});\r\n\r\nconst RegistryModel = types.model({\r\n    name: types.string,\r\n    datasheetPage: types.maybeNull(types.number),\r\n    offsets: types.array(OffsetModel)\r\n});\r\n\r\nconst Store = types.model({\r\n    topics: types.array(TopicModel),\r\n    registries: types.array(RegistryModel),\r\n    pins: types.array(PinModel),\r\n    highlightGroups: types.array(types.string),\r\n    activeGroup: types.maybeNull(types.string),\r\n    activePin: types.maybeNull(types.number),\r\n    datasheetUrl: types.optional(types.string, \"http://ww1.microchip.com/downloads/en/DeviceDoc/ATtiny214-414-814-DataSheet-DS40001912C.pdf\")\r\n\r\n}).actions(self => ({\r\n    setTopics(topics) {\r\n        self.topics = topics;\r\n    },\r\n    setRegistries(registries) {\r\n        self.registries = registries;\r\n    },\r\n    setPins(pins) {\r\n        self.pins = pins;\r\n        console.log(\"Set pins\", pins)\r\n    },\r\n    setHighlightGroups(highlightGroups) {\r\n        console.log(\"set\", highlightGroups)\r\n        if (highlightGroups !== self.highlightGroups) {\r\n            self.highlightGroups = highlightGroups ? highlightGroups : []\r\n        }\r\n    },\r\n    setActiveGroup(activeGroup) {\r\n        if (activeGroup !== self.activeGroup) {\r\n            self.activeGroup = activeGroup\r\n        }\r\n    },\r\n    setActivePinAndGroup(activePin, activeGroup) {\r\n        if (activePin !== self.activePin) {\r\n            self.activePin = activePin\r\n        }\r\n        if (activeGroup !== self.activeGroup) {\r\n            self.activeGroup = activeGroup\r\n        }\r\n    }\r\n})).views(self => ({\r\n    get primaryHighlightGroup() {\r\n        return self.highlightGroups.length ? self.highlightGroups[0] : null\r\n    },\r\n    get secondaryHighlightGroups() {\r\n        return self.highlightGroups.slice(1)\r\n    },\r\n    getTopic(topic) {\r\n        return self.topics.find((t) => t.topic === topic)\r\n    },\r\n    getRegistry(registryName) {\r\n        return self.registries.find((r) => r.name === registryName)\r\n    },\r\n    getRegistryDatasheetLink(registry) {\r\n        return registry.datasheetPage ? `${self.datasheetUrl}#page=${registry.datasheetPage}` : null\r\n    },\r\n    get chipTopics() {\r\n        return self.topics.filter(t => t.chip)\r\n    }\r\n\r\n}));\r\n\r\nconst store = Store.create();\r\nexport default store","import React from \"react\";\r\nimport \"./pin-attribute.scss\";\r\nimport cls from \"../utils/cls\";\r\nimport store from \"../store\";\r\nimport { observer } from 'mobx-react'\r\nimport {getSnapshot} from \"mobx-state-tree\";\r\n\r\nconst PinAttribute = observer(function PinAttribute(props) {\r\n    const { pin, attribute } = props;\r\n    const { label, type, alt, groups } = attribute;\r\n    const { activeGroup, activePin } = store;\r\n    const pinPrimaryGroup = groups.length ? groups[0] : null;\r\n    const pinActive = activePin && activePin === pin.pin\r\n    const pinInActiveGroup = groups.includes(activeGroup);\r\n    const pinInactive =  activeGroup && !pinInActiveGroup\r\n    const pinPrimaryHighlight =  groups.includes(store.primaryHighlightGroup);\r\n    const pinSecondaryHighlight = !pinPrimaryHighlight && store.secondaryHighlightGroups.filter((g) => groups.includes(g)).length;\r\n    return (\r\n        <div className={\r\n            cls(\r\n                `pin-attribute`,\r\n                `${type}-pin`,\r\n                alt && `alt-pin`,\r\n                pinPrimaryHighlight && `highlight-primary-pin`,\r\n                pinSecondaryHighlight && `highlight-secondary-pin`,\r\n                pinActive && `active-pin`,\r\n                pinInActiveGroup && `active-group`,\r\n                pinInactive && `inactive-group`,\r\n                )}\r\n             onMouseEnter={() => store.setHighlightGroups(getSnapshot(groups))}\r\n             onMouseLeave={() => store.setHighlightGroups([])}\r\n             onClick={(e) => {\r\n                 store.setActivePinAndGroup(pin.pin, pinPrimaryGroup);\r\n                 e.stopPropagation()}\r\n             }\r\n        >\r\n            { label }\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default PinAttribute;","import React from \"react\";\r\nimport PropTypes from \"prop-types\"\r\nimport \"./chip-leg.scss\"\r\n\r\nconst ChipLeg = function ChipLeg(props) {\r\n    const {pin} = props;\r\n    return <div className=\"chip-leg\"><span className=\"pin-number\">{pin}</span></div>\r\n};\r\nChipLeg.propTypes = {\r\n    pin: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default ChipLeg;","import React from \"react\";\r\nimport PropTypes from \"prop-types\"\r\nimport \"./chip-leg.scss\"\r\nimport cls from \"../utils/cls\"\r\nimport store from \"../store\"\r\nimport \"./chip-topic.scss\"\r\nimport {observer} from \"mobx-react\";\r\n\r\nconst ChipTopic = observer(function ChipTopic(props) {\r\n    const {topic} = props;\r\n    const active = store.activeGroup === topic;\r\n    const inactive = store.activeGroup && !active;\r\n\r\n    return (\r\n        <div className={\r\n            cls(\r\n                `chip-topic`,\r\n                active && `active-topic`,\r\n                inactive && `inactive-topic`,\r\n            )}\r\n             onMouseEnter={() => store.setHighlightGroups([topic])}\r\n             onMouseLeave={() => store.setHighlightGroups([])}\r\n             onClick={(e) => {\r\n                 store.setActivePinAndGroup(null, topic);\r\n                 e.stopPropagation()\r\n             }\r\n             }\r\n        >\r\n            {topic}\r\n        </div>\r\n    )\r\n});\r\nChipTopic.propTypes = {\r\n    topic: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default ChipTopic;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport PinRow from \"../components/pin-row\";\r\nimport PinAttribute from \"../components/pin-attribute\";\r\nimport store from \"../store\";\r\nimport ChipLeg from \"../components/chip-leg\";\r\nimport ChipTopic from \"../components/chip-topic\";\r\n\r\nconst ChipView = function ChipView(props) {\r\n    const { pins } = store;\r\n    const pinsPerSide = pins.length / 2;\r\n    console.log(\"PINS\", pins);\r\n    const leftPins = pins.slice(0, pinsPerSide).map(pin => {\r\n        const attributes = pin.attributes.map((a, i) => {\r\n            return <PinAttribute key={i} attribute={a} pin={pin}/>\r\n        });\r\n        attributes.reverse();\r\n        return (\r\n            <PinRow pin={pin}>\r\n                {attributes}\r\n                <ChipLeg pin={pin.pin}/>\r\n            </PinRow>\r\n        )\r\n    });\r\n    const rightPins = pins.slice(pinsPerSide, pins.length).map(pin => {\r\n        const attributes = pin.attributes.map((a, i) => {\r\n            return <PinAttribute key={i} attribute={a} pin={pin}/>\r\n        });\r\n        return (\r\n            <PinRow pin={pin}>\r\n                <ChipLeg pin={pin.pin}/>\r\n                {attributes}\r\n            </PinRow>\r\n        )\r\n    });\r\n\r\n    const chipTopics = store.chipTopics.map(topic => {\r\n        return <ChipTopic key={topic.topic} topic={topic.topic}/>\r\n    });\r\n\r\n    return (\r\n        <div className=\"model-row\" onClick={() => store.setActivePinAndGroup(null, null)}>\r\n            <div className=\"model-row--left-column\">\r\n                {leftPins}\r\n            </div>\r\n            <div className=\"model-row--middle-column\">\r\n                <div className=\"attiny\">\r\n                    <div className=\"pin1marker\"/>\r\n                    { chipTopics }\r\n                </div>\r\n            </div>\r\n            <div className=\"model-row--right-column\">\r\n                {rightPins}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\nChipView.propTypes = {\r\n};\r\nexport default ChipView;","import React from \"react\";\r\nimport PropTypes from \"prop-types\"\r\n\r\nconst RegistryLink = function RegistryLink(props) {\r\n    const {registry, offset, field} = props;\r\n\r\n    const text = offset ? `${registry} ${offset}` : `${registry}`;\r\n\r\n    return (\r\n        <a>\r\n            { text }\r\n        </a>\r\n    )\r\n};\r\nRegistryLink.propTypes = {\r\n    registry: PropTypes.string.isRequired,\r\n    offset: PropTypes.string,\r\n    field: PropTypes.string,\r\n};\r\nexport default RegistryLink;","import React, {useState} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport store from \"../store\"\r\nimport \"./registry-offset.scss\";\r\nimport cls from \"../utils/cls\";\r\n\r\n    const RegistryOffset = function RegistryOffset(props) {\r\n    const { offset } = props;\r\n    let bits = 0;\r\n\r\n    const fieldNameBlocks = offset.fields.map((field) => {\r\n        bits += field.size;\r\n        const active = field.relatedGroups.includes(store.activeGroup);\r\n        const disabled = !field.name;\r\n        return (\r\n            <div className={cls(\r\n                `field-size-${field.size}`,\r\n                active && `active`,\r\n                disabled && `disabled`,\r\n            )}>\r\n                {field.name}\r\n            </div>\r\n        )\r\n    }).reverse();\r\n\r\n    const bitBlocks = [...Array(bits).keys()].map(bit => {\r\n        return (\r\n            <div className={cls(\r\n                `field-size-1`,\r\n                `bit-number`\r\n            )}>\r\n                {bit}\r\n            </div>\r\n        )\r\n    }).reverse();\r\n\r\n    const rows = [bitBlocks, fieldNameBlocks].map(block => {\r\n        return (\r\n            <div className=\"block-row\">{block}</div>\r\n        )\r\n    });\r\n\r\n\r\n\r\n    return (\r\n        <div className='registry-offset offset-fields'>\r\n            { rows }\r\n        </div>\r\n    )\r\n};\r\n\r\nRegistryOffset.propTypes = {\r\n    offset: PropTypes.object.isRequired,\r\n};\r\nexport default RegistryOffset;","import React, {useState} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport store from \"../store\"\r\nimport RegistryOffset from \"./registry-offset\";\r\nimport \"./registry.scss\"\r\n\r\nconst Registry = function Registry(props) {\r\n    const [offsetName, setOffsetName] = useState(props.offset)\r\n    const [fieldName, setFieldName] = useState(props.field)\r\n    const registry = store.getRegistry(props.registry);\r\n    if (!registry) {\r\n        return <span>Registry definition for '{props.registry}' is missing</span>\r\n    }\r\n\r\n    const offset = registry.offsets.find(o => o.name === props.offset);\r\n    console.log(\"offset\", offset, props.offset, registry.offsets)\r\n    const title = offset ? `${registry.name} > ${offset.name}` : registry.name;\r\n    const link = store.getRegistryDatasheetLink(registry);\r\n    const linkElement = link ? <a href={link} target=\"_blank\" rel=\"noopener noreferrer\">🗎</a> : null;\r\n    return (\r\n        <div className=\"registry\">\r\n            <div>\r\n                <span className=\"title\">{ title } {linkElement}</span>\r\n                { offset && <RegistryOffset offset={offset}/> }\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nRegistry.propTypes = {\r\n    registry: PropTypes.string.isRequired,\r\n    offset: PropTypes.string,\r\n    field: PropTypes.string,\r\n};\r\nexport default Registry;","import React from \"react\";\r\nimport store from \"../store\"\r\nimport \"./topic-view.scss\"\r\nimport {observer} from \"mobx-react\";\r\nimport RegistryLink from \"../components/registry-link\";\r\nimport Registry from \"../components/registry\";\r\n\r\nconst splitter = new RegExp(\"\\\\bR:(\\\\w+)(?:\\\\.(\\\\w+)(?:\\\\.(\\\\w+))?)?\\\\b\", \"g\");\r\nconst formatText = function formatText(text) {\r\n    console.log(text);\r\n    console.log(splitter);\r\n    let content = [text];\r\n    let references = [];\r\n\r\n    for (const registryDefinition of text.matchAll(splitter)) {\r\n        console.log(\"registryDefinition\", registryDefinition)\r\n        const [, registry, offset, field] = registryDefinition\r\n\r\n        const [before, after] = content[content.length - 1].split(splitter, 1);\r\n        content[content.length - 1] = before;\r\n        content.push(<RegistryLink registry={registry} offset={offset} field={field}/>);\r\n        content.push(after);\r\n        references.push(<Registry registry={registry} offset={offset} field={field}/>);\r\n    }\r\n    content.push(\r\n        <div className=\"references\">\r\n            {references}\r\n        </div>\r\n    );\r\n\r\n    return content\r\n};\r\n\r\nconst TopicView = observer(function TopicView(props) {\r\n    const { activeGroup } = store;\r\n    let formatted = null;\r\n    if (activeGroup) {\r\n        const topic = store.getTopic(activeGroup);\r\n        formatted = topic ? (\r\n            <React.Fragment>\r\n                <h3>{topic.title}</h3>\r\n                <div>{formatText(topic.text)}</div>\r\n            </React.Fragment>\r\n        ) : <span>Topic '{activeGroup}' not found</span>\r\n    }\r\n    if (!formatted) {\r\n        const primaryHighlightGroup = store.primaryHighlightGroup;\r\n        const topic = store.getTopic(primaryHighlightGroup);\r\n        formatted = topic ? <h3>{topic.title}</h3> : null;\r\n    }\r\n    return (\r\n        <div\r\n            className=\"topic-view\"\r\n            onClick={ e => e.stopPropagation() }\r\n        >\r\n            {formatted}\r\n        </div>\r\n    )\r\n});\r\n\r\nexport default TopicView;","import React from 'react';\nimport attinyx14pinsPath from './config/attinyx14-pins.toml';\nimport attinyx14topicsPath from './config/attinyx14-topics.toml';\nimport attinyx14registriesPath from './config/attinyx14-registries.toml';\nimport './App.scss';\nimport * as toml from \"toml\";\nimport ChipView from \"./views/chip-view\";\nimport store from './store';\nimport TopicView from \"./views/topic-view\";\n\nfunction httpGet(theUrl)\n{\n\tlet xmlHttp = new XMLHttpRequest();\n\txmlHttp.open( \"GET\", theUrl, false ); // false for synchronous request\n\txmlHttp.send( null );\n\treturn xmlHttp.responseText;\n}\nconst attinyx14pins = httpGet(attinyx14pinsPath);\nconst attinyx14topics = httpGet(attinyx14topicsPath);\nconst attinyx14registries = httpGet(attinyx14registriesPath);\n\nstore.setPins(toml.parse(attinyx14pins).pins);\nstore.setTopics(toml.parse(attinyx14topics).topics);\nstore.setRegistries(toml.parse(attinyx14registries).regs);\n\nfunction App() {\n    return (\n        <div className=\"App\">\n\t\t\t<ChipView/>\n            <TopicView/>\n            <div className=\"data-row\">\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}