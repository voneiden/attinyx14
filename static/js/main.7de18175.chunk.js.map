{"version":3,"sources":["components/pin-row.js","utils/cls.js","store.js","components/pin-attribute.js","views/chip-view.js","App.js","serviceWorker.js","index.js","config/attinyx14-pins.toml"],"names":["PinRow","props","pin","children","className","cls","args","filter","arg","join","PinAttributeModel","types","model","type","string","label","alt","optional","boolean","groups","array","PinModel","number","attributes","store","pins","highlightGroup","maybeNull","actions","self","setPins","console","log","setHighlightGroup","create","PinAttribute","observer","attribute","includes","onMouseEnter","length","onMouseLeave","ChipView","pinsPerSide","leftPins","slice","map","a","i","key","reverse","rightPins","attinyx14pins","theUrl","xmlHttp","XMLHttpRequest","open","send","responseText","httpGet","attinyx14pinsPath","toml","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.7de18175.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst PinRow = function PinRow(props) {\r\n    const {pin, children} = props;\r\n    return (\r\n        <div className={`pin-row pin-${pin.pin}`}>\r\n            {children}\r\n        </div>\r\n    )\r\n};\r\nPinRow.propTypes = {\r\n    children: PropTypes.arrayOf(PropTypes.node),\r\n    pin: PropTypes.object.isRequired,\r\n};\r\nexport default PinRow;","const cls = function cls(...args) {\r\n    return args.filter(arg => arg).join(' ')\r\n};\r\n\r\nexport default cls;","import { types } from \"mobx-state-tree\";\r\n\r\n\r\nconst PinAttributeModel = types.model({\r\n    type: types.string,\r\n    label: types.string,\r\n    alt: types.optional(types.boolean, false),\r\n    groups: types.array(types.string),\r\n});\r\n\r\nconst PinModel = types.model({\r\n    pin: types.number,\r\n    attributes: types.array(PinAttributeModel),\r\n});\r\n\r\nconst Store = types.model({\r\n    pins: types.array(PinModel),\r\n    highlightGroup: types.maybeNull(types.string),\r\n}).actions(self => ({\r\n    setPins(pins) {\r\n        self.pins = pins;\r\n        console.log(\"Set pins\", pins)\r\n    },\r\n    setHighlightGroup(highlightGroup) {\r\n        if (highlightGroup !== self.highlightGroup) {\r\n            console.log(\"set group to\", highlightGroup)\r\n            self.highlightGroup = highlightGroup\r\n        }\r\n    },\r\n}));\r\n\r\nconst store = Store.create();\r\nexport default store","import React from \"react\";\r\nimport \"./pin-attribute.scss\";\r\nimport cls from \"../utils/cls\";\r\nimport store from \"../store\";\r\nimport { observer } from 'mobx-react'\r\n\r\nconst PinAttribute = observer(function PinAttribute(props) {\r\n    const { attribute } = props;\r\n    const { label, type, alt, groups } = attribute;\r\n    const { highlightGroup } = store;\r\n\r\n\r\n    return (\r\n        <div className={\r\n            cls(\r\n                `pin-attribute`,\r\n                `${type}-pin`,\r\n                alt && `alt-pin`,\r\n                groups && groups.includes(highlightGroup) && `highlight-pin`)}\r\n             onMouseEnter={groups.length ? () => store.setHighlightGroup(groups[0]) : null}\r\n             onMouseLeave={() => store.setHighlightGroup(null)}\r\n        >\r\n            { label }\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default PinAttribute;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport PinRow from \"../components/pin-row\";\r\nimport PinAttribute from \"../components/pin-attribute\";\r\nimport store from \"../store\";\r\n\r\nconst ChipView = function ChipView(props) {\r\n    const { pins } = store;\r\n    const pinsPerSide = pins.length / 2;\r\n    console.log(\"PINS\", pins);\r\n    const leftPins = pins.slice(0, pinsPerSide).map(pin => {\r\n        const attributes = pin.attributes.map((a, i) => {\r\n            return <PinAttribute key={i} attribute={a}/>\r\n        });\r\n        attributes.reverse();\r\n        return (\r\n            <PinRow pin={pin}>\r\n                {attributes}\r\n                <div className=\"chip-leg\"/>\r\n            </PinRow>\r\n        )\r\n    });\r\n    const rightPins = pins.slice(pinsPerSide, pins.length).map(pin => {\r\n        const attributes = pin.attributes.map((a, i) => {\r\n            return <PinAttribute key={i} attribute={a}/>\r\n        });\r\n        return (\r\n            <PinRow pin={pin}>\r\n                <div className=\"chip-leg\"/>\r\n                {attributes}\r\n            </PinRow>\r\n        )\r\n    });\r\n\r\n    return (\r\n        <div className=\"model-row\">\r\n            <div className=\"model-row--left-column\">\r\n                {leftPins}\r\n            </div>\r\n            <div className=\"model-row--middle-column\">\r\n                <div className=\"attiny\"></div>\r\n            </div>\r\n            <div className=\"model-row--right-column\">\r\n                {rightPins}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\nChipView.propTypes = {\r\n};\r\nexport default ChipView;","import React from 'react';\nimport attinyx14pinsPath from './config/attinyx14-pins.toml';\nimport './App.scss';\nimport * as toml from \"toml\";\nimport ChipView from \"./views/chip-view\";\nimport store from './store';\n\nfunction httpGet(theUrl)\n{\n\tlet xmlHttp = new XMLHttpRequest();\n\txmlHttp.open( \"GET\", theUrl, false ); // false for synchronous request\n\txmlHttp.send( null );\n\treturn xmlHttp.responseText;\n}\nconst attinyx14pins = httpGet(attinyx14pinsPath);\n\nstore.setPins(toml.parse(attinyx14pins).pins);\n\n\nfunction App() {\n    return (\n        <div className=\"App\">\n\t\t\t<ChipView/>\n            <div className=\"group-row\">\n            </div>\n            <div className=\"data-row\">\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/attinyx14-pins.0b77c651.toml\";"],"sourceRoot":""}